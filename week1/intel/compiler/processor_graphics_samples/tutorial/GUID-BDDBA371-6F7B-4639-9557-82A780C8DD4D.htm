<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0014)about:internet -->
<html xmlns:MSHelp="http://www.microsoft.com/MSHelp/" lang="en-us" xml:lang="en-us"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="DC.Type" content="topic">
<meta name="DC.Title" content="Specifying the Code Section to Run on Both the Host and Target">
<meta name="DC.Relation" scheme="URI" content="GUID-9AD30AA8-98FF-4D12-AC12-7AB9888AF2CF.htm">
<meta name="DC.Relation" scheme="URI" content="http://www.intel.com/software/products/softwaredocs_feedback">
<meta name="DC.Format" content="XHTML">
<meta name="DC.Identifier" content="GUID-BDDBA371-6F7B-4639-9557-82A780C8DD4D">
<meta name="DC.Language" content="en-US">
<link rel="stylesheet" type="text/css" href="intel_css_styles.css">
<title>Specifying the Code Section to Run on Both the Host and Target</title>
<script src="resources/prism/prism.js"><!----></script>
<link href="resources/prism/prism.css" rel="stylesheet">
</head>
<body id="GUID-BDDBA371-6F7B-4639-9557-82A780C8DD4D">
 <!-- ==============(Start:NavScript)================= -->
 <script src="NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
 <script language="JavaScript1.2" type="text/javascript">WriteNavLink(0);</script>
 <!-- ==============(End:NavScript)================= -->


 
  <h1 class="topictitle1"> Specifying the Code Section to Run on Both the Host and Target</h1>
 
  <div> 
	 <p>In this step, you will look at the section of the source code that is defined to run on both the host and the target. 
	 </p>
 
	 <p> 
	 <ol id="GUID-5A37EBA0-6948-460C-9D4E-643A3B23A332"> 
		<li> In 
		  <b class="uicontrol">Solution Explorer</b>, right click 
		  <b class="uicontrol">Solution 'samples' &gt; crossfade &gt; crossfade.cpp &gt; Open</b>. The source code appears. 
		</li>
 
		<li> 
		  <p> Find the following code: 
		  </p>
 
		  <p> 
			 <pre>#pragma offload target(gfx)if (do_offload) pin(inputArray1, inputArray2, outputArray: length(arraySize))
    _Cilk_for (int i=0; i&lt;arraySize; i++){
        outputArray[i] = (inputArray1[i] * a1 + inputArray2[i] * a2) &gt;&gt; 8;
    }
</pre> 
		  </p>
 
		</li>
 
	 </ol>
 
	 </p>
 
	 <p> This code block performs a weighted sum of two input arrays. At the start of the code block is the offload pragma. The compiler interprets this pragma to compile the following code block to run on both the host and the target. 
	 </p>
 
	 <p> The host and the target can share memory. The address of the memory area to share needs to be explicitly provided to the offload runtime. The 
		<span class="keyword">pin</span> clause of the 
		<span class="keyword">offload</span> pragma serves for this purpose. The syntax of the offload pragma is similar to 
		<span class="keyword">in</span>, 
		<span class="keyword">out</span>, and 
		<span class="keyword">inout</span> clauses. 
	 </p>
 
	 <ul id="GUID-E597668B-021A-4281-B8DB-0FB28AC0EBE6"> 
		<li> 
		  <p>The 
			 <span class="keyword">pin</span> clause defines the variable as shared between the CPU and the target. 
		  </p>
 
		</li>
 
		<li> 
		  <p>The 
			 <span class="keyword">in</span> clause defines the variable as strictly an input to the target. The value is not copied back to the host. 
		  </p>
 
		</li>
 
		<li> 
		  <p>The 
			 <span class="keyword">out</span> clause defines the variable as strictly an output of the target. The host does not copy the variable to the target. 
		  </p>
 
		</li>
 
		<li> 
		  <p>The 
			 <span class="keyword">inout</span> clause defines the variable that is both copied to and from the host and target. 
		  </p>
 
		</li>
 
	 </ul>
 
	 <p> All of these clauses accept the optional length modifier which allows you to specify the length of the array in elements if it is not known at compile time. 
	 </p>
 
	 <p> The pragma has the<span class="keyword">target</span> parameter to direct the code to the target designated by keyword 
		<span class="keyword">gfx</span>. 
	 </p>
 
	 <p> The pragma also has the 
		<span class="keyword">if</span> clause which provides to the application the run time control whether the code is executed on the host or the target. If the value provided to the 
		<span class="keyword">if</span> clause evaluates to true, the code with the 
		<span class="keyword">offload</span> pragma executes on the available target. If the value provided to the 
		<span class="keyword">if</span> clause evaluates to false, the code executes only on the host. 
	 </p>
 
	 <p> Immediately after the 
		<span class="keyword">offload</span> pragma is the 
		<span class="keyword">_Cilk_for</span> keyword. This keyword reflects one of the most important requirements to the code for the target: only a parallel loop or a parallel loop nest can be offloaded to the target and must immediately follow the 
		<span class="keyword">offload</span> pragma. 
	 </p>
 
	 <p> Although the compiler by default compiles the source code into an application that runs on both the host and target, you can also compile the same source code into an application that runs on just the host. 
	 </p>
 
	 <p> In the next step, you will compile the source code into an application that runs only on the host. 
	 </p>
 
	 <p><a href="GUID-1F9B70CD-92B8-4106-B485-1446558D8621.htm#GUID-1F9B70CD-92B8-4106-B485-1446558D8621"><img class="border(0)" style="border-style: none" src="GUID-16FD5A1C-2BAC-489D-A70A-A3A4FCC6569B-low.jpg" alt="Open the Building the OpenMP Version topic"></a> 
	 </p>
 
  </div>
 
  
<div class="familylinks">
<div class="parentlink"><strong>Parent topic:</strong>&nbsp;<a href="GUID-9AD30AA8-98FF-4D12-AC12-7AB9888AF2CF.htm">Tutorial: Windows* Version</a></div>
</div>
<div></div> 

</body>
</html>
